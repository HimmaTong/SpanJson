// Autogenerated
// ReSharper disable BuiltInTypeReferenceStyle
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
namespace SpanJson.Helpers
{
    public static partial class MemberComparisonHelper
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, byte a)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 1
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 0)) == a;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ushort a)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 2
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 0)) == a;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ushort a, byte b)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 3
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 2)) == b;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, uint a)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 4
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 0)) == a;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, uint a, byte b)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 5
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 4)) == b;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, uint a, ushort b)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 6
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 4)) == b;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, uint a, ushort b, byte c)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 7
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 4)) == b
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 6)) == c;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 8
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, byte b)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 9
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 8)) == b;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ushort b)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 10
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 8)) == b;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ushort b, byte c)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 11
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 10)) == c;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, uint b)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 12
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 8)) == b;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, uint b, byte c)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 13
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 12)) == c;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, uint b, ushort c)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 14
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 12)) == c;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, uint b, ushort c, byte d)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 15
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 12)) == c
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 14)) == d;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 16
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, byte c)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 17
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 16)) == c;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ushort c)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 18
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 16)) == c;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ushort c, byte d)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 19
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 18)) == d;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, uint c)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 20
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 16)) == c;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, uint c, byte d)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 21
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 20)) == d;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, uint c, ushort d)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 22
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 20)) == d;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, uint c, ushort d, byte e)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 23
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 20)) == d
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 22)) == e;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 24
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, byte d)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 25
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 24)) == d;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ushort d)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 26
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 24)) == d;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ushort d, byte e)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 27
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 26)) == e;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, uint d)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 28
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 24)) == d;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, uint d, byte e)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 29
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 28)) == e;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, uint d, ushort e)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 30
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 28)) == e;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, uint d, ushort e, byte f)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 31
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 28)) == e
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 30)) == f;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 32
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, byte e)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 33
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 32)) == e;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ushort e)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 34
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 32)) == e;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ushort e, byte f)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 35
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 34)) == f;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, uint e)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 36
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 32)) == e;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, uint e, byte f)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 37
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 36)) == f;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, uint e, ushort f)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 38
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 36)) == f;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, uint e, ushort f, byte g)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 39
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 36)) == f
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 38)) == g;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 40
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e, byte f)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 41
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 40)) == f;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e, ushort f)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 42
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 40)) == f;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e, ushort f, byte g)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 43
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 40)) == f
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 42)) == g;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e, uint f)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 44
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 40)) == f;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e, uint f, byte g)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 45
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 40)) == f
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 44)) == g;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e, uint f, ushort g)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 46
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 40)) == f
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 44)) == g;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e, uint f, ushort g, byte h)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 47
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 40)) == f
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 44)) == g
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 46)) == h;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e, ulong f)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 48
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 40)) == f;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e, ulong f, byte g)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 49
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 40)) == f
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 48)) == g;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e, ulong f, ushort g)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 50
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 40)) == f
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 48)) == g;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e, ulong f, ushort g, byte h)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 51
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 40)) == f
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 48)) == g
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 50)) == h;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e, ulong f, uint g)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 52
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 40)) == f
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 48)) == g;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e, ulong f, uint g, byte h)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 53
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 40)) == f
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 48)) == g
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 52)) == h;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e, ulong f, uint g, ushort h)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 54
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 40)) == f
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 48)) == g
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 52)) == h;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e, ulong f, uint g, ushort h, byte i)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 55
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 40)) == f
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 48)) == g
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 52)) == h
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 54)) == i;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e, ulong f, ulong g)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 56
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 40)) == f
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 48)) == g;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e, ulong f, ulong g, byte h)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 57
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 40)) == f
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 48)) == g
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 56)) == h;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e, ulong f, ulong g, ushort h)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 58
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 40)) == f
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 48)) == g
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 56)) == h;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e, ulong f, ulong g, ushort h, byte i)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 59
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 40)) == f
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 48)) == g
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 56)) == h
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 58)) == i;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e, ulong f, ulong g, uint h)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 60
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 40)) == f
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 48)) == g
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 56)) == h;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e, ulong f, ulong g, uint h, byte i)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 61
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 40)) == f
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 48)) == g
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 56)) == h
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 60)) == i;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e, ulong f, ulong g, uint h, ushort i)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 62
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 40)) == f
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 48)) == g
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 56)) == h
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 60)) == i;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e, ulong f, ulong g, uint h, ushort i, byte j)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 63
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 40)) == f
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 48)) == g
                && Unsafe.ReadUnaligned<uint>(ref Unsafe.Add(ref bStart, 56)) == h
                && Unsafe.ReadUnaligned<ushort>(ref Unsafe.Add(ref bStart, 60)) == i
                && Unsafe.ReadUnaligned<byte>(ref Unsafe.Add(ref bStart, 62)) == j;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsMatch(in ReadOnlySpan<byte> span, ulong a, ulong b, ulong c, ulong d, ulong e, ulong f, ulong g, ulong h)
        {
            ref var bStart = ref MemoryMarshal.GetReference(span);
			return span.Length == 64
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 0)) == a
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 8)) == b
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 16)) == c
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 24)) == d
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 32)) == e
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 40)) == f
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 48)) == g
                && Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref bStart, 56)) == h;
        }

    }
}